/* tslint:disable */
/* eslint-disable */
/**
 * Game^3 API
 * Game^3 API
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Game,
  Term,
} from '../models/index';
import {
    GameFromJSON,
    GameToJSON,
    TermFromJSON,
    TermToJSON,
} from '../models/index';

export interface GetEventGamesRequest {
    eventSlug: string;
}

export interface GetEventTermsRequest {
    eventSlug: string;
}

export interface GetGameRequest {
    gameId: string;
}

export interface GetGameIconRequest {
    gameId: string;
}

export interface GetGameImageRequest {
    gameId: string;
}

export interface GetGamesRequest {
    termId?: string;
    eventSlug?: string;
    userId?: string;
    include?: string;
}

export interface PatchGameRequest {
    gameId: string;
    termId?: string;
    discordUserId?: string;
    title?: string;
    creatorName?: string;
    creatorPageUrl?: string;
    gamePageUrl?: string;
    description?: string;
    place?: string;
    icon?: Blob;
    image?: Blob;
}

export interface PostGameRequest {
    title: string;
    creatorName: string;
    description: string;
    icon: Blob;
    creatorPageUrl?: string;
    gamePageUrl?: string;
    image?: Blob;
}

/**
 * 
 */
export class GamesApi extends runtime.BaseAPI {

    /**
     * イベントに登録されているゲームのリストを取得
     */
    async getEventGamesRaw(requestParameters: GetEventGamesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Game>>> {
        if (requestParameters.eventSlug === null || requestParameters.eventSlug === undefined) {
            throw new runtime.RequiredError('eventSlug','Required parameter requestParameters.eventSlug was null or undefined when calling getEventGames.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/events/{eventSlug}/games`.replace(`{${"eventSlug"}}`, encodeURIComponent(String(requestParameters.eventSlug))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GameFromJSON));
    }

    /**
     * イベントに登録されているゲームのリストを取得
     */
    async getEventGames(requestParameters: GetEventGamesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Game>> {
        const response = await this.getEventGamesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * イベントに登録されているタームのリストを取得
     */
    async getEventTermsRaw(requestParameters: GetEventTermsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Term>>> {
        if (requestParameters.eventSlug === null || requestParameters.eventSlug === undefined) {
            throw new runtime.RequiredError('eventSlug','Required parameter requestParameters.eventSlug was null or undefined when calling getEventTerms.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/events/{eventSlug}/terms`.replace(`{${"eventSlug"}}`, encodeURIComponent(String(requestParameters.eventSlug))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TermFromJSON));
    }

    /**
     * イベントに登録されているタームのリストを取得
     */
    async getEventTerms(requestParameters: GetEventTermsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Term>> {
        const response = await this.getEventTermsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ゲーム情報を取得
     */
    async getGameRaw(requestParameters: GetGameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Game>> {
        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling getGame.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/games/{gameId}`.replace(`{${"gameId"}}`, encodeURIComponent(String(requestParameters.gameId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameFromJSON(jsonValue));
    }

    /**
     * ゲーム情報を取得
     */
    async getGame(requestParameters: GetGameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Game> {
        const response = await this.getGameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ゲームのアイコン画像を取得
     */
    async getGameIconRaw(requestParameters: GetGameIconRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling getGameIcon.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/games/{gameId}/icon`.replace(`{${"gameId"}}`, encodeURIComponent(String(requestParameters.gameId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * ゲームのアイコン画像を取得
     */
    async getGameIcon(requestParameters: GetGameIconRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getGameIconRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ゲームの画像を取得
     */
    async getGameImageRaw(requestParameters: GetGameImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling getGameImage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/games/{gameId}/image`.replace(`{${"gameId"}}`, encodeURIComponent(String(requestParameters.gameId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * ゲームの画像を取得
     */
    async getGameImage(requestParameters: GetGameImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getGameImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ゲームのリストを取得 GET /games?termId=X&eventSlug=X&userId=X&include=unpublished
     */
    async getGamesRaw(requestParameters: GetGamesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Game>>> {
        const queryParameters: any = {};

        if (requestParameters.termId !== undefined) {
            queryParameters['termId'] = requestParameters.termId;
        }

        if (requestParameters.eventSlug !== undefined) {
            queryParameters['eventSlug'] = requestParameters.eventSlug;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.include !== undefined) {
            queryParameters['include'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/games`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GameFromJSON));
    }

    /**
     * ゲームのリストを取得 GET /games?termId=X&eventSlug=X&userId=X&include=unpublished
     */
    async getGames(requestParameters: GetGamesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Game>> {
        const response = await this.getGamesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ゲーム情報を変更
     */
    async patchGameRaw(requestParameters: PatchGameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling patchGame.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.termId !== undefined) {
            formParams.append('termId', requestParameters.termId as any);
        }

        if (requestParameters.discordUserId !== undefined) {
            formParams.append('discordUserId', requestParameters.discordUserId as any);
        }

        if (requestParameters.title !== undefined) {
            formParams.append('title', requestParameters.title as any);
        }

        if (requestParameters.creatorName !== undefined) {
            formParams.append('creatorName', requestParameters.creatorName as any);
        }

        if (requestParameters.creatorPageUrl !== undefined) {
            formParams.append('creatorPageUrl', requestParameters.creatorPageUrl as any);
        }

        if (requestParameters.gamePageUrl !== undefined) {
            formParams.append('gamePageUrl', requestParameters.gamePageUrl as any);
        }

        if (requestParameters.description !== undefined) {
            formParams.append('description', requestParameters.description as any);
        }

        if (requestParameters.place !== undefined) {
            formParams.append('place', requestParameters.place as any);
        }

        if (requestParameters.icon !== undefined) {
            formParams.append('icon', requestParameters.icon as any);
        }

        if (requestParameters.image !== undefined) {
            formParams.append('image', requestParameters.image as any);
        }

        const response = await this.request({
            path: `/games/{gameId}`.replace(`{${"gameId"}}`, encodeURIComponent(String(requestParameters.gameId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ゲーム情報を変更
     */
    async patchGame(requestParameters: PatchGameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchGameRaw(requestParameters, initOverrides);
    }

    /**
     * ゲームを登録
     */
    async postGameRaw(requestParameters: PostGameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Game>> {
        if (requestParameters.title === null || requestParameters.title === undefined) {
            throw new runtime.RequiredError('title','Required parameter requestParameters.title was null or undefined when calling postGame.');
        }

        if (requestParameters.creatorName === null || requestParameters.creatorName === undefined) {
            throw new runtime.RequiredError('creatorName','Required parameter requestParameters.creatorName was null or undefined when calling postGame.');
        }

        if (requestParameters.description === null || requestParameters.description === undefined) {
            throw new runtime.RequiredError('description','Required parameter requestParameters.description was null or undefined when calling postGame.');
        }

        if (requestParameters.icon === null || requestParameters.icon === undefined) {
            throw new runtime.RequiredError('icon','Required parameter requestParameters.icon was null or undefined when calling postGame.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.title !== undefined) {
            formParams.append('title', requestParameters.title as any);
        }

        if (requestParameters.creatorName !== undefined) {
            formParams.append('creatorName', requestParameters.creatorName as any);
        }

        if (requestParameters.creatorPageUrl !== undefined) {
            formParams.append('creatorPageUrl', requestParameters.creatorPageUrl as any);
        }

        if (requestParameters.gamePageUrl !== undefined) {
            formParams.append('gamePageUrl', requestParameters.gamePageUrl as any);
        }

        if (requestParameters.description !== undefined) {
            formParams.append('description', requestParameters.description as any);
        }

        if (requestParameters.icon !== undefined) {
            formParams.append('icon', requestParameters.icon as any);
        }

        if (requestParameters.image !== undefined) {
            formParams.append('image', requestParameters.image as any);
        }

        const response = await this.request({
            path: `/games`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameFromJSON(jsonValue));
    }

    /**
     * ゲームを登録
     */
    async postGame(requestParameters: PostGameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Game> {
        const response = await this.postGameRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
