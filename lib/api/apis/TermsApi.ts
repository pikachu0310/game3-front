/* tslint:disable */
/* eslint-disable */
/**
 * Game^3 API
 * Game^3 API
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Game,
  PatchTermRequest,
  PostTermRequest,
  Term,
} from '../models/index';
import {
    GameFromJSON,
    GameToJSON,
    PatchTermRequestFromJSON,
    PatchTermRequestToJSON,
    PostTermRequestFromJSON,
    PostTermRequestToJSON,
    TermFromJSON,
    TermToJSON,
} from '../models/index';

export interface GetTermRequest {
    termId: string;
}

export interface GetTermGamesRequest {
    termId: string;
}

export interface PatchTermOperationRequest {
    termId: string;
    patchTermRequest: PatchTermRequest;
}

export interface PostTermOperationRequest {
    postTermRequest: PostTermRequest;
}

/**
 * 
 */
export class TermsApi extends runtime.BaseAPI {

    /**
     * ターム情報を取得
     */
    async getTermRaw(requestParameters: GetTermRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Term>> {
        if (requestParameters.termId === null || requestParameters.termId === undefined) {
            throw new runtime.RequiredError('termId','Required parameter requestParameters.termId was null or undefined when calling getTerm.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/terms/{termId}`.replace(`{${"termId"}}`, encodeURIComponent(String(requestParameters.termId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TermFromJSON(jsonValue));
    }

    /**
     * ターム情報を取得
     */
    async getTerm(requestParameters: GetTermRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Term> {
        const response = await this.getTermRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * タームに登録されているゲームのリストを取得
     */
    async getTermGamesRaw(requestParameters: GetTermGamesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Game>>> {
        if (requestParameters.termId === null || requestParameters.termId === undefined) {
            throw new runtime.RequiredError('termId','Required parameter requestParameters.termId was null or undefined when calling getTermGames.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/terms/{termId}/games`.replace(`{${"termId"}}`, encodeURIComponent(String(requestParameters.termId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GameFromJSON));
    }

    /**
     * タームに登録されているゲームのリストを取得
     */
    async getTermGames(requestParameters: GetTermGamesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Game>> {
        const response = await this.getTermGamesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * イベントに登録されているタームのリストを取得
     */
    async getTermsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Term>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/terms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TermFromJSON));
    }

    /**
     * イベントに登録されているタームのリストを取得
     */
    async getTerms(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Term>> {
        const response = await this.getTermsRaw(initOverrides);
        return await response.value();
    }

    /**
     * ターム情報を変更
     */
    async patchTermRaw(requestParameters: PatchTermOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.termId === null || requestParameters.termId === undefined) {
            throw new runtime.RequiredError('termId','Required parameter requestParameters.termId was null or undefined when calling patchTerm.');
        }

        if (requestParameters.patchTermRequest === null || requestParameters.patchTermRequest === undefined) {
            throw new runtime.RequiredError('patchTermRequest','Required parameter requestParameters.patchTermRequest was null or undefined when calling patchTerm.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/terms/{termId}`.replace(`{${"termId"}}`, encodeURIComponent(String(requestParameters.termId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchTermRequestToJSON(requestParameters.patchTermRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ターム情報を変更
     */
    async patchTerm(requestParameters: PatchTermOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchTermRaw(requestParameters, initOverrides);
    }

    /**
     * タームを登録
     */
    async postTermRaw(requestParameters: PostTermOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Term>> {
        if (requestParameters.postTermRequest === null || requestParameters.postTermRequest === undefined) {
            throw new runtime.RequiredError('postTermRequest','Required parameter requestParameters.postTermRequest was null or undefined when calling postTerm.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/terms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostTermRequestToJSON(requestParameters.postTermRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TermFromJSON(jsonValue));
    }

    /**
     * タームを登録
     */
    async postTerm(requestParameters: PostTermOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Term> {
        const response = await this.postTermRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
