/* tslint:disable */
/* eslint-disable */
/**
 * Game^3 API
 * Game^3 API
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Game
 */
export interface Game {
    /**
     * ゲームID
     * @type {string}
     * @memberof Game
     */
    id: string;
    /**
     * タームID
     * @type {string}
     * @memberof Game
     */
    termId?: string;
    /**
     * ゲーム作成者
     * @type {string}
     * @memberof Game
     */
    creatorName?: string;
    /**
     * ゲーム作成者のページのURL
     * @type {string}
     * @memberof Game
     */
    creatorPageUrl?: string;
    /**
     * ゲームページのURL
     * @type {string}
     * @memberof Game
     */
    gamePageUrl?: string;
    /**
     * 展示するゲームタイトル
     * @type {string}
     * @memberof Game
     */
    title: string;
    /**
     * ゲームの説明
     * @type {string}
     * @memberof Game
     */
    description?: string;
    /**
     * 展示場所
     * @type {string}
     * @memberof Game
     */
    place?: string;
    /**
     * イベントID
     * @type {string}
     * @memberof Game
     */
    eventId?: string;
    /**
     * DiscordのユーザーID
     * @type {string}
     * @memberof Game
     */
    discordUserId: string;
}

/**
 * Check if a given object implements the Game interface.
 */
export function instanceOfGame(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "discordUserId" in value;

    return isInstance;
}

export function GameFromJSON(json: any): Game {
    return GameFromJSONTyped(json, false);
}

export function GameFromJSONTyped(json: any, ignoreDiscriminator: boolean): Game {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'termId': !exists(json, 'termId') ? undefined : json['termId'],
        'creatorName': !exists(json, 'creatorName') ? undefined : json['creatorName'],
        'creatorPageUrl': !exists(json, 'creatorPageUrl') ? undefined : json['creatorPageUrl'],
        'gamePageUrl': !exists(json, 'gamePageUrl') ? undefined : json['gamePageUrl'],
        'title': json['title'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'place': !exists(json, 'place') ? undefined : json['place'],
        'eventId': !exists(json, 'eventId') ? undefined : json['eventId'],
        'discordUserId': json['discordUserId'],
    };
}

export function GameToJSON(value?: Game | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'termId': value.termId,
        'creatorName': value.creatorName,
        'creatorPageUrl': value.creatorPageUrl,
        'gamePageUrl': value.gamePageUrl,
        'title': value.title,
        'description': value.description,
        'place': value.place,
        'eventId': value.eventId,
        'discordUserId': value.discordUserId,
    };
}

